// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model ParticipantsInRooms {
    Room       Room     @relation(fields: [roomId], references: [id])
    roomId     String
    User       User     @relation(fields: [userId], references: [id])
    userId     String
    assignedAt DateTime @default(now())

    @@id([roomId, userId])
}

model Topic {
    id        String   @id @default(uuid())
    name      String
    image     String?
    createdAt DateTime @default(now())
    rooms     Room[]
}

model Room {
    id           String                @id @default(uuid())
    title        String
    description  String
    authorName   String?
    authorImage  String?
    // To return `Date`s intact through the API we need to add data transformers
    // https://trpc.io/docs/data-transformers
    createdAt    DateTime              @default(now())
    updatedAt    DateTime              @default(now()) @updatedAt
    // Foreign keys
    participants ParticipantsInRooms[]
    Author       User?                 @relation(fields: [authorId], references: [id])
    authorId     String?
    topic        Topic?                @relation(fields: [topicId], references: [id])
    topicId      String?
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String                @id @default(cuid())
    name          String?
    email         String?               @unique
    emailVerified DateTime?
    image         String?
    balance       Int                   @default(300)
    accounts      Account[]
    sessions      Session[]
    rooms         ParticipantsInRooms[]
    Room          Room[]
    mates         User[]                @relation("mates")
    matesRelation User[]                @relation("mates")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
